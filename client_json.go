// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package alpenhorn

import (
	json "encoding/json"
	easyjson "github.com/davidlazar/easyjson"
	jlexer "github.com/davidlazar/easyjson/jlexer"
	jwriter "github.com/davidlazar/easyjson/jwriter"
	config "vuvuzela.io/alpenhorn/config"
	pkg "vuvuzela.io/alpenhorn/pkg"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDecodeSentFriendRequestC2eed687(in *jlexer.Lexer, out *sentFriendRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Username":
			out.Username = string(in.String())
		case "ExpectedKey":
			if in.IsNull() {
				in.Skip()
				out.ExpectedKey = nil
			} else {
				out.ExpectedKey = in.BytesReadable()
			}
		case "Confirmation":
			out.Confirmation = bool(in.Bool())
		case "DialRound":
			out.DialRound = uint32(in.Uint32())
		case "SentRound":
			out.SentRound = uint32(in.Uint32())
		case "DHPublicKey":
			if in.IsNull() {
				in.Skip()
				out.DHPublicKey = nil
			} else {
				if out.DHPublicKey == nil {
					out.DHPublicKey = new([32]uint8)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					copy((*out.DHPublicKey)[:], in.BytesReadable())
				}
			}
		case "DHPrivateKey":
			if in.IsNull() {
				in.Skip()
				out.DHPrivateKey = nil
			} else {
				if out.DHPrivateKey == nil {
					out.DHPrivateKey = new([32]uint8)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					copy((*out.DHPrivateKey)[:], in.BytesReadable())
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEncodeSentFriendRequestC2eed687(out *jwriter.Writer, in sentFriendRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Username\":")
	out.String(string(in.Username))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ExpectedKey\":")
	out.Base32Bytes(in.ExpectedKey)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Confirmation\":")
	out.Bool(bool(in.Confirmation))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"DialRound\":")
	out.Uint32(uint32(in.DialRound))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"SentRound\":")
	out.Uint32(uint32(in.SentRound))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"DHPublicKey\":")
	if in.DHPublicKey == nil {
		out.RawString("null")
	} else {
		out.Base32Bytes((*in.DHPublicKey)[:])
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"DHPrivateKey\":")
	if in.DHPrivateKey == nil {
		out.RawString("null")
	} else {
		out.Base32Bytes((*in.DHPrivateKey)[:])
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sentFriendRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEncodeSentFriendRequestC2eed687(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sentFriendRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEncodeSentFriendRequestC2eed687(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sentFriendRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDecodeSentFriendRequestC2eed687(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sentFriendRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDecodeSentFriendRequestC2eed687(l, v)
}
func easyjsonDecodePersistedStateC2eed687(in *jlexer.Lexer, out *persistedState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Username":
			out.Username = string(in.String())
		case "LongTermPublicKey":
			if in.IsNull() {
				in.Skip()
				out.LongTermPublicKey = nil
			} else {
				out.LongTermPublicKey = in.BytesReadable()
			}
		case "LongTermPrivateKey":
			if in.IsNull() {
				in.Skip()
				out.LongTermPrivateKey = nil
			} else {
				out.LongTermPrivateKey = in.BytesReadable()
			}
		case "PKGLoginKey":
			if in.IsNull() {
				in.Skip()
				out.PKGLoginKey = nil
			} else {
				out.PKGLoginKey = in.BytesReadable()
			}
		case "AddFriendConfig":
			if in.IsNull() {
				in.Skip()
				out.AddFriendConfig = nil
			} else {
				if out.AddFriendConfig == nil {
					out.AddFriendConfig = new(config.SignedConfig)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.AddFriendConfig).UnmarshalJSON(data))
				}
			}
		case "DialingConfig":
			if in.IsNull() {
				in.Skip()
				out.DialingConfig = nil
			} else {
				if out.DialingConfig == nil {
					out.DialingConfig = new(config.SignedConfig)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DialingConfig).UnmarshalJSON(data))
				}
			}
		case "IncomingFriendRequests":
			if in.IsNull() {
				in.Skip()
				out.IncomingFriendRequests = nil
			} else {
				in.Delim('[')
				if out.IncomingFriendRequests == nil {
					if !in.IsDelim(']') {
						out.IncomingFriendRequests = make([]*IncomingFriendRequest, 0, 8)
					} else {
						out.IncomingFriendRequests = []*IncomingFriendRequest{}
					}
				} else {
					out.IncomingFriendRequests = (out.IncomingFriendRequests)[:0]
				}
				for !in.IsDelim(']') {
					var v11 *IncomingFriendRequest
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						if v11 == nil {
							v11 = new(IncomingFriendRequest)
						}
						(*v11).UnmarshalEasyJSON(in)
					}
					out.IncomingFriendRequests = append(out.IncomingFriendRequests, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "OutgoingFriendRequests":
			if in.IsNull() {
				in.Skip()
				out.OutgoingFriendRequests = nil
			} else {
				in.Delim('[')
				if out.OutgoingFriendRequests == nil {
					if !in.IsDelim(']') {
						out.OutgoingFriendRequests = make([]*OutgoingFriendRequest, 0, 8)
					} else {
						out.OutgoingFriendRequests = []*OutgoingFriendRequest{}
					}
				} else {
					out.OutgoingFriendRequests = (out.OutgoingFriendRequests)[:0]
				}
				for !in.IsDelim(']') {
					var v12 *OutgoingFriendRequest
					if in.IsNull() {
						in.Skip()
						v12 = nil
					} else {
						if v12 == nil {
							v12 = new(OutgoingFriendRequest)
						}
						(*v12).UnmarshalEasyJSON(in)
					}
					out.OutgoingFriendRequests = append(out.OutgoingFriendRequests, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SentFriendRequests":
			if in.IsNull() {
				in.Skip()
				out.SentFriendRequests = nil
			} else {
				in.Delim('[')
				if out.SentFriendRequests == nil {
					if !in.IsDelim(']') {
						out.SentFriendRequests = make([]*sentFriendRequest, 0, 8)
					} else {
						out.SentFriendRequests = []*sentFriendRequest{}
					}
				} else {
					out.SentFriendRequests = (out.SentFriendRequests)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *sentFriendRequest
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(sentFriendRequest)
						}
						(*v13).UnmarshalEasyJSON(in)
					}
					out.SentFriendRequests = append(out.SentFriendRequests, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Friends":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Friends = make(map[string]*persistedFriend)
				} else {
					out.Friends = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v14 *persistedFriend
					if in.IsNull() {
						in.Skip()
						v14 = nil
					} else {
						if v14 == nil {
							v14 = new(persistedFriend)
						}
						(*v14).UnmarshalEasyJSON(in)
					}
					(out.Friends)[key] = v14
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEncodePersistedStateC2eed687(out *jwriter.Writer, in persistedState) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Username\":")
	out.String(string(in.Username))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"LongTermPublicKey\":")
	out.Base32Bytes(in.LongTermPublicKey)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"LongTermPrivateKey\":")
	out.Base32Bytes(in.LongTermPrivateKey)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"PKGLoginKey\":")
	out.Base32Bytes(in.PKGLoginKey)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"AddFriendConfig\":")
	if in.AddFriendConfig == nil {
		out.RawString("null")
	} else {
		out.Raw((*in.AddFriendConfig).MarshalJSON())
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"DialingConfig\":")
	if in.DialingConfig == nil {
		out.RawString("null")
	} else {
		out.Raw((*in.DialingConfig).MarshalJSON())
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"IncomingFriendRequests\":")
	if in.IncomingFriendRequests == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v21, v22 := range in.IncomingFriendRequests {
			if v21 > 0 {
				out.RawByte(',')
			}
			if v22 == nil {
				out.RawString("null")
			} else {
				(*v22).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"OutgoingFriendRequests\":")
	if in.OutgoingFriendRequests == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v23, v24 := range in.OutgoingFriendRequests {
			if v23 > 0 {
				out.RawByte(',')
			}
			if v24 == nil {
				out.RawString("null")
			} else {
				(*v24).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"SentFriendRequests\":")
	if in.SentFriendRequests == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v25, v26 := range in.SentFriendRequests {
			if v25 > 0 {
				out.RawByte(',')
			}
			if v26 == nil {
				out.RawString("null")
			} else {
				(*v26).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Friends\":")
	if in.Friends == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v27First := true
		for v27Name, v27Value := range in.Friends {
			if !v27First {
				out.RawByte(',')
			}
			v27First = false
			out.String(string(v27Name))
			out.RawByte(':')
			if v27Value == nil {
				out.RawString("null")
			} else {
				(*v27Value).MarshalEasyJSON(out)
			}
		}
		out.RawByte('}')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v persistedState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEncodePersistedStateC2eed687(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v persistedState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEncodePersistedStateC2eed687(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *persistedState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDecodePersistedStateC2eed687(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *persistedState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDecodePersistedStateC2eed687(l, v)
}
func easyjsonDecodePersistedFriendC2eed687(in *jlexer.Lexer, out *persistedFriend) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Username":
			out.Username = string(in.String())
		case "LongTermKey":
			if in.IsNull() {
				in.Skip()
				out.LongTermKey = nil
			} else {
				out.LongTermKey = in.BytesReadable()
			}
		case "ExtraData":
			if in.IsNull() {
				in.Skip()
				out.ExtraData = nil
			} else {
				out.ExtraData = in.BytesReadable()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEncodePersistedFriendC2eed687(out *jwriter.Writer, in persistedFriend) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Username\":")
	out.String(string(in.Username))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"LongTermKey\":")
	out.Base32Bytes(in.LongTermKey)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ExtraData\":")
	out.Base32Bytes(in.ExtraData)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v persistedFriend) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEncodePersistedFriendC2eed687(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v persistedFriend) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEncodePersistedFriendC2eed687(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *persistedFriend) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDecodePersistedFriendC2eed687(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *persistedFriend) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDecodePersistedFriendC2eed687(l, v)
}
func easyjsonDecodeOutgoingFriendRequestC2eed687(in *jlexer.Lexer, out *OutgoingFriendRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Username":
			out.Username = string(in.String())
		case "ExpectedKey":
			if in.IsNull() {
				in.Skip()
				out.ExpectedKey = nil
			} else {
				out.ExpectedKey = in.BytesReadable()
			}
		case "Confirmation":
			out.Confirmation = bool(in.Bool())
		case "DialRound":
			out.DialRound = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEncodeOutgoingFriendRequestC2eed687(out *jwriter.Writer, in OutgoingFriendRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Username\":")
	out.String(string(in.Username))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ExpectedKey\":")
	out.Base32Bytes(in.ExpectedKey)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Confirmation\":")
	out.Bool(bool(in.Confirmation))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"DialRound\":")
	out.Uint32(uint32(in.DialRound))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OutgoingFriendRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEncodeOutgoingFriendRequestC2eed687(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OutgoingFriendRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEncodeOutgoingFriendRequestC2eed687(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OutgoingFriendRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDecodeOutgoingFriendRequestC2eed687(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OutgoingFriendRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDecodeOutgoingFriendRequestC2eed687(l, v)
}
func easyjsonDecodeIncomingFriendRequestC2eed687(in *jlexer.Lexer, out *IncomingFriendRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Username":
			out.Username = string(in.String())
		case "LongTermKey":
			if in.IsNull() {
				in.Skip()
				out.LongTermKey = nil
			} else {
				out.LongTermKey = in.BytesReadable()
			}
		case "DHPublicKey":
			if in.IsNull() {
				in.Skip()
				out.DHPublicKey = nil
			} else {
				if out.DHPublicKey == nil {
					out.DHPublicKey = new([32]uint8)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					copy((*out.DHPublicKey)[:], in.BytesReadable())
				}
			}
		case "DialRound":
			out.DialRound = uint32(in.Uint32())
		case "Verifiers":
			if in.IsNull() {
				in.Skip()
				out.Verifiers = nil
			} else {
				in.Delim('[')
				if out.Verifiers == nil {
					if !in.IsDelim(']') {
						out.Verifiers = make([]pkg.PublicServerConfig, 0, 1)
					} else {
						out.Verifiers = []pkg.PublicServerConfig{}
					}
				} else {
					out.Verifiers = (out.Verifiers)[:0]
				}
				for !in.IsDelim(']') {
					var v39 pkg.PublicServerConfig
					(v39).UnmarshalEasyJSON(in)
					out.Verifiers = append(out.Verifiers, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEncodeIncomingFriendRequestC2eed687(out *jwriter.Writer, in IncomingFriendRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Username\":")
	out.String(string(in.Username))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"LongTermKey\":")
	out.Base32Bytes(in.LongTermKey)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"DHPublicKey\":")
	if in.DHPublicKey == nil {
		out.RawString("null")
	} else {
		out.Base32Bytes((*in.DHPublicKey)[:])
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"DialRound\":")
	out.Uint32(uint32(in.DialRound))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Verifiers\":")
	if in.Verifiers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v43, v44 := range in.Verifiers {
			if v43 > 0 {
				out.RawByte(',')
			}
			(v44).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IncomingFriendRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEncodeIncomingFriendRequestC2eed687(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IncomingFriendRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEncodeIncomingFriendRequestC2eed687(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IncomingFriendRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDecodeIncomingFriendRequestC2eed687(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IncomingFriendRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDecodeIncomingFriendRequestC2eed687(l, v)
}
