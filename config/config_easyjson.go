// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package config

import (
	json "encoding/json"
	easyjson "github.com/davidlazar/easyjson"
	jlexer "github.com/davidlazar/easyjson/jlexer"
	jwriter "github.com/davidlazar/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDecodeSignedConfigV16615c02e(in *jlexer.Lexer, out *signedConfigV1) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Version":
			out.Version = int(in.Int())
		case "Created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "Expires":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Expires).UnmarshalJSON(data))
			}
		case "PrevConfigHash":
			out.PrevConfigHash = string(in.String())
		case "Service":
			out.Service = string(in.String())
		case "Inner":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Inner).UnmarshalJSON(data))
			}
		case "Guardians":
			if in.IsNull() {
				in.Skip()
				out.Guardians = nil
			} else {
				in.Delim('[')
				if out.Guardians == nil {
					if !in.IsDelim(']') {
						out.Guardians = make([]Guardian, 0, 1)
					} else {
						out.Guardians = []Guardian{}
					}
				} else {
					out.Guardians = (out.Guardians)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Guardian
					(v1).UnmarshalEasyJSON(in)
					out.Guardians = append(out.Guardians, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Signatures":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Signatures = make(map[string][]uint8)
				} else {
					out.Signatures = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 []uint8
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						v2 = in.BytesReadable()
					}
					(out.Signatures)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEncodeSignedConfigV16615c02e(out *jwriter.Writer, in signedConfigV1) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Version\":")
	out.Int(int(in.Version))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Created\":")
	out.Raw((in.Created).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Expires\":")
	out.Raw((in.Expires).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"PrevConfigHash\":")
	out.String(string(in.PrevConfigHash))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Service\":")
	out.String(string(in.Service))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Inner\":")
	out.Raw((in.Inner).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Guardians\":")
	if in.Guardians == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v4, v5 := range in.Guardians {
			if v4 > 0 {
				out.RawByte(',')
			}
			(v5).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Signatures\":")
	if in.Signatures == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v6First := true
		for v6Name, v6Value := range in.Signatures {
			if !v6First {
				out.RawByte(',')
			}
			v6First = false
			out.String(string(v6Name))
			out.RawByte(':')
			out.Base32Bytes(v6Value)
		}
		out.RawByte('}')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v signedConfigV1) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEncodeSignedConfigV16615c02e(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v signedConfigV1) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEncodeSignedConfigV16615c02e(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *signedConfigV1) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDecodeSignedConfigV16615c02e(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *signedConfigV1) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDecodeSignedConfigV16615c02e(l, v)
}
func easyjsonDecodeKeyAddr6615c02e(in *jlexer.Lexer, out *keyAddr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				out.Key = in.BytesReadable()
			}
		case "Address":
			out.Address = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEncodeKeyAddr6615c02e(out *jwriter.Writer, in keyAddr) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Key\":")
	out.Base32Bytes(in.Key)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Address\":")
	out.String(string(in.Address))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v keyAddr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEncodeKeyAddr6615c02e(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v keyAddr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEncodeKeyAddr6615c02e(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *keyAddr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDecodeKeyAddr6615c02e(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *keyAddr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDecodeKeyAddr6615c02e(l, v)
}
func easyjsonDecodeDialingV16615c02e(in *jlexer.Lexer, out *dialingV1) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Version":
			out.Version = int(in.Int())
		case "Coordinator":
			(out.Coordinator).UnmarshalEasyJSON(in)
		case "MixServers":
			if in.IsNull() {
				in.Skip()
				out.MixServers = nil
			} else {
				in.Delim('[')
				if out.MixServers == nil {
					if !in.IsDelim(']') {
						out.MixServers = make([]keyAddr, 0, 1)
					} else {
						out.MixServers = []keyAddr{}
					}
				} else {
					out.MixServers = (out.MixServers)[:0]
				}
				for !in.IsDelim(']') {
					var v12 keyAddr
					(v12).UnmarshalEasyJSON(in)
					out.MixServers = append(out.MixServers, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CDNServer":
			(out.CDNServer).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEncodeDialingV16615c02e(out *jwriter.Writer, in dialingV1) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Version\":")
	out.Int(int(in.Version))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Coordinator\":")
	(in.Coordinator).MarshalEasyJSON(out)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"MixServers\":")
	if in.MixServers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v13, v14 := range in.MixServers {
			if v13 > 0 {
				out.RawByte(',')
			}
			(v14).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"CDNServer\":")
	(in.CDNServer).MarshalEasyJSON(out)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v dialingV1) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEncodeDialingV16615c02e(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v dialingV1) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEncodeDialingV16615c02e(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *dialingV1) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDecodeDialingV16615c02e(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *dialingV1) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDecodeDialingV16615c02e(l, v)
}
func easyjsonDecodeAddFriendV16615c02e(in *jlexer.Lexer, out *addFriendV1) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Version":
			out.Version = int(in.Int())
		case "Coordinator":
			(out.Coordinator).UnmarshalEasyJSON(in)
		case "PKGServers":
			if in.IsNull() {
				in.Skip()
				out.PKGServers = nil
			} else {
				in.Delim('[')
				if out.PKGServers == nil {
					if !in.IsDelim(']') {
						out.PKGServers = make([]keyAddr, 0, 1)
					} else {
						out.PKGServers = []keyAddr{}
					}
				} else {
					out.PKGServers = (out.PKGServers)[:0]
				}
				for !in.IsDelim(']') {
					var v15 keyAddr
					(v15).UnmarshalEasyJSON(in)
					out.PKGServers = append(out.PKGServers, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "MixServers":
			if in.IsNull() {
				in.Skip()
				out.MixServers = nil
			} else {
				in.Delim('[')
				if out.MixServers == nil {
					if !in.IsDelim(']') {
						out.MixServers = make([]keyAddr, 0, 1)
					} else {
						out.MixServers = []keyAddr{}
					}
				} else {
					out.MixServers = (out.MixServers)[:0]
				}
				for !in.IsDelim(']') {
					var v16 keyAddr
					(v16).UnmarshalEasyJSON(in)
					out.MixServers = append(out.MixServers, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CDNServer":
			(out.CDNServer).UnmarshalEasyJSON(in)
		case "RegistrarHost":
			out.RegistrarHost = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEncodeAddFriendV16615c02e(out *jwriter.Writer, in addFriendV1) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Version\":")
	out.Int(int(in.Version))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Coordinator\":")
	(in.Coordinator).MarshalEasyJSON(out)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"PKGServers\":")
	if in.PKGServers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v17, v18 := range in.PKGServers {
			if v17 > 0 {
				out.RawByte(',')
			}
			(v18).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"MixServers\":")
	if in.MixServers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v19, v20 := range in.MixServers {
			if v19 > 0 {
				out.RawByte(',')
			}
			(v20).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"CDNServer\":")
	(in.CDNServer).MarshalEasyJSON(out)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"RegistrarHost\":")
	out.String(string(in.RegistrarHost))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v addFriendV1) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEncodeAddFriendV16615c02e(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v addFriendV1) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEncodeAddFriendV16615c02e(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *addFriendV1) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDecodeAddFriendV16615c02e(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *addFriendV1) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDecodeAddFriendV16615c02e(l, v)
}
func easyjsonDecodeGuardian6615c02e(in *jlexer.Lexer, out *Guardian) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Username":
			out.Username = string(in.String())
		case "Key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				out.Key = in.BytesReadable()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEncodeGuardian6615c02e(out *jwriter.Writer, in Guardian) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Username\":")
	out.String(string(in.Username))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Key\":")
	out.Base32Bytes(in.Key)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Guardian) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEncodeGuardian6615c02e(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Guardian) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEncodeGuardian6615c02e(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Guardian) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDecodeGuardian6615c02e(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Guardian) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDecodeGuardian6615c02e(l, v)
}
func easyjsonDecodeCoordinatorConfig6615c02e(in *jlexer.Lexer, out *CoordinatorConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				out.Key = in.BytesReadable()
			}
		case "Address":
			out.Address = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEncodeCoordinatorConfig6615c02e(out *jwriter.Writer, in CoordinatorConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Key\":")
	out.Base32Bytes(in.Key)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Address\":")
	out.String(string(in.Address))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CoordinatorConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEncodeCoordinatorConfig6615c02e(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CoordinatorConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEncodeCoordinatorConfig6615c02e(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CoordinatorConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDecodeCoordinatorConfig6615c02e(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CoordinatorConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDecodeCoordinatorConfig6615c02e(l, v)
}
func easyjsonDecodeCDNServerConfig6615c02e(in *jlexer.Lexer, out *CDNServerConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				out.Key = in.BytesReadable()
			}
		case "Address":
			out.Address = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEncodeCDNServerConfig6615c02e(out *jwriter.Writer, in CDNServerConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Key\":")
	out.Base32Bytes(in.Key)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Address\":")
	out.String(string(in.Address))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CDNServerConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEncodeCDNServerConfig6615c02e(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CDNServerConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEncodeCDNServerConfig6615c02e(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CDNServerConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDecodeCDNServerConfig6615c02e(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CDNServerConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDecodeCDNServerConfig6615c02e(l, v)
}
