// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package keywheel

import (
	json "encoding/json"
	easyjson "github.com/davidlazar/easyjson"
	jlexer "github.com/davidlazar/easyjson/jlexer"
	jwriter "github.com/davidlazar/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDecodeRoundSecret2aeb2176(in *jlexer.Lexer, out *roundSecret) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Round":
			out.Round = uint32(in.Uint32())
		case "Secret":
			if in.IsNull() {
				in.Skip()
				out.Secret = nil
			} else {
				if out.Secret == nil {
					out.Secret = new([32]uint8)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					copy((*out.Secret)[:], in.BytesReadable())
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEncodeRoundSecret2aeb2176(out *jwriter.Writer, in roundSecret) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Round\":")
	out.Uint32(uint32(in.Round))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Secret\":")
	if in.Secret == nil {
		out.RawString("null")
	} else {
		out.Base32Bytes((*in.Secret)[:])
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v roundSecret) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEncodeRoundSecret2aeb2176(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v roundSecret) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEncodeRoundSecret2aeb2176(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *roundSecret) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDecodeRoundSecret2aeb2176(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *roundSecret) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDecodeRoundSecret2aeb2176(l, v)
}
